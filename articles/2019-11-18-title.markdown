---
layout: post
title: "Creating an Emoji Game with Vue, Auth0 and Google Vision API"
description: "Creating an Emoji Game with Vue, Auth0 and Google Vision API"
date: "2019-11-18 08:30"
author:
  name: "Fikayo Adepoju"
  url: "coderonfleek"
  mail: "fik4christ@yahoo.com"
  avatar: "https://twitter.com/coderonfleek/profile_image?size=original"
related:
  - 2017-11-15-an-example-of-all-possible-elements
---

**TL;DR:** Let's face it, Artificial Intelligence (AI) is taking over applications. In the not-so-far future, every software will have AI systems embedded in it and applications without it will slowly fade away. The ability for software applications to understand data generated by users and use it for valuable predictions is fast becoming a must-have in every application. The big names in tech are not unaware of this as we see tech giants like Google, Microsoft e.t.c. launching AI and Machine learning APIs and SDKs to enable developers easily embed these capabilities in their applications. In this article, we would make use of [Google's Vision API](https://cloud.google.com/vision/) to build a simple emoji prediction game.

## What we are to build

The application we will be building is a simple emoji game that displays a random emoji to the user, the user then has to scan a physical object around them that matches the emoji using the webcam and Google's Vision API will predict the scanned image and return results that will be compared to the emoji to see if it matches.

The game would operate as follows:

1. User has to sign in to play
2. User would select a camera feed from a dropdown that displays all available camera feeds on the system
3. User clicks **Play** to start a new game, an emoji will be displayed to the user to scan a matching object
4. User scans object and clicks on **Predict** for Google's Vision API to return results to check for a match
5. User must scan an object before a 60 seconds timer runs out.
6. User gets 10 points for a correct match and looses 5 points for a wrong one
7. User can skip an emoji for another one to be displayed within the 60 seconds window.
8. If the 60 seconds runs out before the user gets a correct prediction, its Game Over!

## Prerequisites

In order to follow along with this article, a few things are required:

1. basic Knowldge of Vuejs
2. [Nodejs](https://nodejs.org) installed on your system
3. [Vue CLI](https://cli.vuejs.org/) installed on your system
4. a Google account

## Creating the Google API Project

### Creating the Project

The first thing you need to have set up is a [Google Cloud Platform](https://cloud.google.com) (GCP for short) project. To do that, simply go to the [GCP Console](https://console.cloud.google.com), this would require you to sign in with your Google account if you aren't already signed in.

Once signed in, you would see the GCP dashboard. To create a new project, click on the project dropdown at the left hand side of the blue top toolbar.

![Project Dropdown - Google Cloud Platform](images/project-dropdown.png "Project Dropdown - Google Cloud Platform")

This pops up a modal with a list of all your projects (empty if you are yet to create a project).

On the modal, click on the **New Project** button at the top right hand corner.

![Project Dialog](images/new-project.png "Create New Project - Google Cloud Platform")

This automatically redirects you to the project creation page where you can enter your preferred project name as shown below:

![Project Form](images/project-form.png "Project creation page - Google Cloud Platform")

After entering your project name, leave the **Location** as _No Organization_ and click the **Create** button.

The system automatically sets up the project and notifies you when its done. It also selects the project as the current project in the project dropdown on the top blue toolbar. If your new project is not automatically selected, you can click the project dropdown and select the project in the project list displayed in the modal.

### Enabling the Cloud Vision API

In order to be able to use GCP's Vision API, you need to enable the API for your project. With your project selected on the project dropdown, click **Dashboard** on the sidemenu. Then just below the top blue toolbar, click on the **Enable APIs and Services** button, this will then redirect you to the API library page which shows a list of all available APIs.

In the search box, type in _Vision API_ in order to filter the list. You should now see the **Cloud Vision API** as shown below:

![Cloud Vision API](images/cloud-vision-api.png "Cloud Vision API - Google Cloud Platform")

Click on it to select it. You will now be redirected to the **Cloud Vision API** page that gives an overview of what the API is all about.

Click on the blue **Enable** button to enable this API for your project.

![Enable Cloud Vision API](images/enable-cloud-vision.png "Cloud Vision API - Google Cloud Platform")

### Getting an API Key

When calling the Google Cloud Vision API from your application, you need to authenticate your requests using an API key.

To get an API key, simply navigate to the [Credentials page](https://console.cloud.google.com/apis/credentials). Do ensure that your project is selected on the project dropdown at the top.

Click on the **Create credentials** dropdown and select **API key** from the list of options. The system automatically generates an API key for you and displays it in a dialog. Copy this key and close the dialog box. You will be needing this key later in the project.

**Please Note:** Google requires that you have a billing account setup for your GCP account in order to continue using the API once your free limit is exceeded. You can setup a billing account [here](https://console.cloud.google.com/billing). You can find out more about [Pricing](https://cloud.google.com/vision/pricing) and [Quotas](https://cloud.google.com/vision/quotas) on the GCP website.

## Creating the Auth0 Application

Next up, we will be creating our Auth0 application to handle authentication in our application, so head to [Auth0](https://auth0.com)'s website and click the **Log in** button to sign into the console.

Once logged in, click on **Applications** on the left hand side menu. On the **Applications** page, click on the big orange **CREATE APPLICATION** button.

![Create Auth0 Application](images/create-app-btn.png "Create Application - Auth0 Console")

On the **Create Application** dialog that pops up, enter an appropriate name for your application and select **Single Page Web Applications** from the options below the application name field.

![Create Auth0 Application](images/new-app.png "Create Application - Auth0 Console")

Now click the **Create** button to complete the process.

After successful creation of the application, go to the **Settings** section of your newly created app. In the **Allowed Callback URLs**, **Allowed Web Origins**, **Allowed Logout URLs** and **Allowed Origins (CORS)** fields, enter `http://localhost:8080`. This address is the default address of the Vue application we would be creating later on.

Once you're done entering these values, scroll down and hit the **SAVE CHANGES** button.

## Scaffolding the Vue project

Create a new Vue application by running the following command in the folder where you want your application to be located.

`vue create my-emoji-game`

When the **Please pick a preset?** prompt comes up in the interactive CLI, select _default_.

After your selection, the Vue CLI begins scaffolding your new Vue application.

## Setting up Authentication with Auth0

We are going to be setting up authentication with Auth0 in our Vue application based on the instructions from [Auth0's documentation](https://auth0.com/docs/quickstart/spa/vuejs/01-login).

### The authentication service

The first thing you need to do is to write an authentication service. For this you first need to install the `@auth0/auth0-spa-js`. So, at the root of your Vue application, run the following command:

`npm install @auth0/auth0-spa-js`

Once the installation is complete, the next thing you are to do is to create the authentication service. Within the authentication service, you will need your Auth0 domain and application id. In order to separate these details from your service code, create a new file named `auth_config.json` at the root of your project and past the following snippet inside:

```json
{
  "domain": "YOUR_AUTH0_DOMAIN",
  "clientId": "YOUR_APP_ID"
}
```

Ensure to replace the placeholders `YOUR_AUTH0_DOMAIN` and `YOUR_APP_ID` with the appropriate values. You can find your client id on your application page and your Auth0 domain is in the form [YOUR_USERNAME].auth0.com e.g. user1.auth0.com.

Now to create the authentication service, inside the `src` folder, created a folder named `auth` and side this folder create a file named `index.js` and paste the code below:

```javascript
import Vue from "vue";
import createAuth0Client from "@auth0/auth0-spa-js";

/** Define a default action to perform after authentication */
const DEFAULT_REDIRECT_CALLBACK = () =>
  window.history.replaceState({}, document.title, window.location.pathname);

let instance;

/** Returns the current instance of the SDK */
export const getInstance = () => instance;

/** Creates an instance of the Auth0 SDK. If one has already been created, it returns that instance */
export const useAuth0 = ({
  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,
  redirectUri = window.location.origin,
  ...options
}) => {
  if (instance) return instance;

  // The 'instance' is simply a Vue object
  instance = new Vue({
    data() {
      return {
        loading: true,
        isAuthenticated: false,
        user: {},
        auth0Client: null,
        popupOpen: false,
        error: null
      };
    },
    methods: {
      /** Authenticates the user using a popup window */
      async loginWithPopup(o) {
        this.popupOpen = true;

        try {
          await this.auth0Client.loginWithPopup(o);
        } catch (e) {
          // eslint-disable-next-line
          console.error(e);
        } finally {
          this.popupOpen = false;
        }

        this.user = await this.auth0Client.getUser();
        this.isAuthenticated = true;
      },
      /** Handles the callback when logging in using a redirect */
      async handleRedirectCallback() {
        this.loading = true;
        try {
          await this.auth0Client.handleRedirectCallback();
          this.user = await this.auth0Client.getUser();
          this.isAuthenticated = true;
        } catch (e) {
          this.error = e;
        } finally {
          this.loading = false;
        }
      },
      /** Authenticates the user using the redirect method */
      loginWithRedirect(o) {
        return this.auth0Client.loginWithRedirect(o);
      },
      /** Returns all the claims present in the ID token */
      getIdTokenClaims(o) {
        return this.auth0Client.getIdTokenClaims(o);
      },
      /** Returns the access token. If the token is invalid or missing, a new one is retrieved */
      getTokenSilently(o) {
        return this.auth0Client.getTokenSilently(o);
      },
      /** Gets the access token using a popup window */

      getTokenWithPopup(o) {
        return this.auth0Client.getTokenWithPopup(o);
      },
      /** Logs the user out and removes their session on the authorization server */
      logout(o) {
        return this.auth0Client.logout(o);
      }
    },
    /** Use this lifecycle method to instantiate the SDK client */
    async created() {
      // Create a new instance of the SDK client using members of the given options object
      this.auth0Client = await createAuth0Client({
        domain: options.domain,
        client_id: options.clientId,
        audience: options.audience,
        redirect_uri: redirectUri
      });

      try {
        // If the user is returning to the app after authentication..
        if (
          window.location.search.includes("code=") &&
          window.location.search.includes("state=")
        ) {
          // handle the redirect and retrieve tokens
          const { appState } = await this.auth0Client.handleRedirectCallback();

          // Notify subscribers that the redirect callback has happened, passing the appState
          // (useful for retrieving any pre-authentication state)
          onRedirectCallback(appState);
        }
      } catch (e) {
        this.error = e;
      } finally {
        // Initialize our internal authentication state
        this.isAuthenticated = await this.auth0Client.isAuthenticated();
        this.user = await this.auth0Client.getUser();
        this.loading = false;
      }
    }
  });

  return instance;
};

// Create a simple Vue plugin to expose the wrapper object throughout the application
export const Auth0Plugin = {
  install(Vue, options) {
    Vue.prototype.$auth = useAuth0(options);
  }
};
```

This service creates a wrapper object around the Auth0 SDK and implements a Vue plugin that exposes this wrapper object to the rest of the application. This wrapper API consists of useful authentication methods like `loginWithPopup`, `logout` etc. that you can call within your application.

### Adding a router

In order to manage redirection during Auth0's authentication process, you need to add a router to the project. For this you will need to install the `vue-router` package by running the following command in the root of your project.

`npm install vue-router`

After successful installation of the package, create a file named `router.js` in your `src` folder and paste in the following code:

```javascript
import Vue from "vue";

import VueRouter from "vue-router";
import App from "./App";

Vue.use(VueRouter);

const routes = [{ path: "/", component: App }];

const router = new VueRouter({
  routes
});

export default router;
```

This simply sets up the router for use in the application and exports an instance of the Vue router which has been supplied our array of routes.

Now go into the file `main.js` in the `src` folder and replace its contents with the following code:

```javascript
import Vue from "vue";
import App from "./App.vue";

import router from "./router";

// Import the Auth0 configuration
import { domain, clientId } from "../auth_config.json";

// Import the plugin here
import { Auth0Plugin } from "./auth";

// Install the authentication plugin here
Vue.use(Auth0Plugin, {
  domain,
  clientId,
  onRedirectCallback: appState => {
    router.push(
      appState && appState.targetUrl
        ? appState.targetUrl
        : window.location.pathname
    );
  }
});

Vue.config.productionTip = false;

new Vue({
  router,
  render: h => h(App)
}).$mount("#app");
```

This file loads in the Auth0 configuration, the `router` and authentication service plugin. The plugin is set up for use within our application using `Vue.use` with the required parameters, the `router` is also loaded into the root instance of the application.

## Building the Emoji game

Now to the main action, this is where you tie everything together. You will be writing code to do the following:

1. Load and display in a select list the camera input options available on the system
2. Display the feed of the currently selected camera input
3. Display an object Emoji (no smileys)
4. Create a countdown timer.
5. Make a request with the captured image to Google's Vision API
6. Display the current score
7. Display the User's details
8. Display pop dialogs for notifications.

Phew! That's a handful isn't it. But don't worry, you will be done in no time.

### Installing required packages

The first step to building the game is to install the packages that will be required. You need to install the following packages:

1. axios : API requests
2. bootstrap : Styling
3. emoji.json : Emojis

### Building the game page

### Adding authentication to the game page

## Running the Application
