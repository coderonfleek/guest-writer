---
layout: post
title: "Build a Personalized VR Experience with Auth0 and WebVR"
description: "Creating Virtual Reality experience on the Web using Auth0, Threejs WebGL Library and WebVR UI Lirbary"
date: "2018-04-17 08:30"
author:
  name: "Fikayo Adepoju"
  url: "coderonfleek"
  mail: "fik4christ@yahoo.com"
  avatar: "https://twitter.com/coderonfleek/profile_image?size=original"
related:
- 2017-11-15-an-example-of-all-possible-elements
---

**TL;DR:** Briefly describe what this article is about and what the reader will achieve/learn after reading it. Please,
also provide the link to a GitHub repository that contains code related to this article.

## Prerequisites
Building Vr experiences in the web starts with building great WebGL (Web Graphics Layer) content. WebGL is a browser API that allows us to design 3D graphics on the Web.
WebGL in itself is a very complex API to use, luckily libraries like ThreeJS are available to help us build 3D content fast and easy thus basic knowledge of the Threejs library is also required to follow up with this article.

## What we would be building
We will be building an application which allows a user to login with their Google account and then be taken into a 3D world where the user sees their name floating in space.


## Setting Up Google Authentication
To authenticate with Google we are going to be using Auth0 Lock, an embeddable login form for desktop, tablet and mobile devices.
### Setup Google Social Login on Auth0 Account
To use Auth0 Lock, we first need to setup an application on our Auth0 account for this project and enable that client to use Google authentication.
Log into your Auth0 dashboard and go to Applications, then create a new application by clicking the big orange **+Create Application** button.
Create a new application by entering the name and selecting **Regular Web Applications**, then click the 'Create' button.

After creating your application, go to **Connections->Social** on the sidemeb, click the Google tab and enter your Google+ API credentials.
Now click on the Applications tab on the same dialog and enable your app to use the Google authentication.
Close out of the dialog and turn on the toggle button on the Google tab.

### Google Login with Auth0 Lock
Create `index.html`, this is the file/page that will be loaded when our application starts up.
To begin using Lock, you first need to include the Auth0 Lock script, we would be adding the script from a CDN 

```markup
<script src="https://cdn.auth0.com/js/lock/11.5.2/lock.min.js"></script>
```

Then setup Lock with your Auth0 Application client name and client Id thus:

```javascript
var lock = new Auth0Lock(
            "CLIENT_ID",
            "CLIENT_DOMAIN",
            {
                allowedConnections: ["google-oauth2"],
                rememberLastLogin: false,
                socialButtonStyle: "big",
                languageDictionary: { "title": "WebVR Demo" },
                language: "en",
                theme: {},
                closable: false,
                auth: {
                    redirect: false
                }
            }
        );

        lock.on("authenticated", function (authResult) {
            lock.getUserInfo(authResult.accessToken, function (error, profile) {
                if (error) {
                    console.log(error);
                    return;
                }

                localStorage.setItem("accessToken", authResult.accessToken);
                localStorage.setItem("profile", JSON.stringify(profile));

                //Go to VR Page
                window.location.replace('stage.html');
            });
        });


        lock.on('authorization_error', function (error) {
            console.log('authorization_error', error);
        });

        lock.show();

```
In the code above, we first setup Auth0 Lock using our Application's client Id and domain and instruct it to use the Google login by entering  `google-oauth2` into the `allowedConnections` array.

We then setup a listener on the `authenticated` event. This event is then handled by calling the Lock's `getUserInfo` function and passing the access token returned from the authenctication results.
The callback to this function will save the access token and user profile in the browser's local storage to access later.

We then immediately redirect to our would-be virtual reality scene page which we will have in a file called `stage.html`.

Also, we add an event handler to take care of the `authorization_error` error event.

Lastly, we call Lock's `show` method to instantly display Auth0's login box when the page loads.
## Building the Scene

### Getting the Required Libraries
### Setting Up the 3D Scene

#### Scene
#### Camera
#### Skybox
#### Light
#### Rendering

### Floating the user's name in space

#### Add name Text Object
#### Animate the name

## Testing the Project

## Conclusion
