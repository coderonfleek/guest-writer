---
layout: post
title: "State Management in Vue Apps using Vuex"
description: "Managing state in Vuejs Applications using the Vuex flux library"
date: "2018-09-19 08:30"
author:
  name: "Fikayo Adepoju"
  url: "coderonfleek"
  mail: "fik4christ@yahoo.com"
  avatar: "https://twitter.com/coderonfleek/profile_image?size=original"
related:
  - 2017-11-15-an-example-of-all-possible-elements
---

**TL;DR:** As [Single Page Applications](https://en.wikipedia.org/wiki/Single-page_application) are fast becoming the defacto way of developing Frontend applications, one of the major issues faced implementing them is how we manage state between all the components spread around our application. Vuejs Apps are not an exception to this. However, a few neat flux libraries like [Redux](https://redux.js.org/) have risen to solve this problem. The Vuejs team has also jumped on the flux train and come up with [Vuex](https://vuex.vuejs.org/) which is a state management pattern + library for Vue.js applications. In this article, we are going to be learning how to manage state in Vuejs applications using Vuex by building a simple application with Vue and Vuex.

## Prerequisites

Before you begin going through this article, there are a few things you should already be familiar with, at least at a basic level.

1. [Nodejs](https://nodejs.org) and NPM Installed on your computer
2. Javascript ES6 (ES2015)
3. [Vuejs](https://vuejs.org/)

## Introducing Vuex

Vuex is a state management pattern and library for Vuejs applications built on the concept of unidirectional data flow which is the [Flux](https://facebook.github.io/flux/docs/overview.html) pattern of managing state. It helps build and manage a centralized store which holds the entire state of the application, thus, any component connected to this store gets updated as the state gets updated. Vuex also ensures that the state of the application is mutated in a predictable fashion making it easier to track changes and debug issues.

### Vuex Concepts

![Vuex Architecture](https://vuex.vuejs.org/vuex.png)

The concept Vuex works with is to have components or server responses from a Backend API raise events (Actions). These actions then cause the state (contained in the central store) to be mutated through a defined set of rules (Mutations), the resultant change in state is then reflected in any component connected to the Vuex store.

### Vuex Store

The Vuex store is responsible for holding and managing our application state. It defines the state of the application and methods of mutating and retreiving state. The state is a single object which contains all our application level state and is the single source of truth in our application.

```javascript
// Make sure to call Vue.use(Vuex) first if using a module system

const store = new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment(state) {
      state.count++;
    }
  }
});
```

### Vuex Mutations

[Mutations](https://vuex.vuejs.org/guide/mutations.html) serve as the only way to change state in a Vuex store. They operate similar to events and event handlers. They have a name which represents the event, and a function which is the handler for the event. The handler receives the current state as its first argument and performs change operations on it.
Mutations can also receive a second argument which contains a payload of data needed in making state changes.

```javascript
const store = new Vuex.Store({
  ....
  mutations: {
    increment (state) {
      // mutate state
      state.count++
    }
  }
})
```

### Vuex Actions

[Actions](https://vuex.vuejs.org/guide/actions.html) are similar to mutations except instead of mutating state, they commit mutations. Actions can also perform asynchronous operations which can then be preceded by commiting a state mutation.

```javascript
const store = new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment(state) {
      state.count++;
    }
  },
  actions: {
    increment(context) {
      context.commit("increment");
    }
  }
});
```

### Using Vuex Getters

Sometimes we would like to return some parts of our state pre-processed (e.g. return date in a particular format) or return a computed value or a default for a null state property, [Getters](https://vuex.vuejs.org/guide/getters.html) enable us do this. Getters are simply functions that receive the state as argument and return the computed version of a property.

```javascript
const store = new Vuex.Store({
  state: {
    todos: [
      { id: 1, text: "...", done: true },
      { id: 2, text: "...", done: false }
    ]
  },
  getters: {
    doneTodos: state => {
      return state.todos.filter(todo => todo.done);
    }
  }
});
```

Getters can the be accessed on the `store.getters` object using property-style access:

```javascript
store.getters.doneTodosCount;
```

If the component is the child of the component that uses the store, you can access getters from `this.$store.getters` e.g.:

```javascript
this.$store.getters.doneTodosCount;
```

You can also access a getter within another getter by passing `getters` as the second argument to the getter inside which you want to reference another getter.

```javascript
getters: {
  // ...
  doneTodosCount: (state, getters) => {
    return getters.doneTodos.length;
  };
}
```

## Vue and Vuex in Action

### What we would be building

![Vue Vuex Bitcoin Dashboard](images/bitcoin-dashboard.gif)

With our newly acquired knowledge of Vuex, we will be building a simple Bitcoin dashboard that shows the current price of Bitcoin and updates the price, percentage increase and price difference of Bitcoin in real-time throughout all its components. It also shows the history of previous prices up to four price changes ago.
NB: These are faked Bitcoin prices generated by the application. Thanks.

### Creating a new Vue App

We will be creating a new Vue application using the [Vue CLI](https://cli.vuejs.org/), so if you don't have the cli already installed, run the following command:

`npm install -g @vue/cli`

After a successfull installation, simply navigate to the directory in which you want to keep your project and run the command below to create a new Vuejs app named `bitcoin-dashboard`.

`vue create bitcoin-dashboard`

This will create our new project. Enter into the project root by running `cd bitcoin-dashboard` then run the following command to serve your Vuejs application in the browser

`npm run serve`

You can always shutdown the server by running `Ctrl + C`.

### Installing Dependencies

For our project, we are going to be installing three (3) dependencies which are [Bootstrap](https://getbootstrap.com), Vuex and [Font Awesome](https://fontawesome.com/) (the free version) as a development dependency.

### Setting up the Vuex Store

### Creating the store-connected Components

### Running the Application

## Conclusion
